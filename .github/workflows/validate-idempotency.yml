name: Validate Idempotency

on:
  pull_request:
    paths:
      - "**.sql"

jobs:
  validate-idempotency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up PostgreSQL
        run: |
          docker run -d --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:14
          sleep 5  # Wait for PostgreSQL to start

      - name: Run migration scripts twice for idempotency check
        id: idempotency
        run: |
          error_log=""
          exit_code=0

          for file in $(find . -name "V*.sql"); do
            echo "Testing idempotency for $file..."
            
            # Create a temporary schema for this test
            schema_name="test_$(date +%s%N | md5sum | head -c 10)"
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE SCHEMA $schema_name;" || continue
            
            # Wrap the script execution in a transaction and set search_path
            wrapper_script=$(cat <<EOF
            BEGIN;
            SET search_path TO $schema_name;
            
            $(cat "$file")
            
            COMMIT;
            EOF
            )
            
            # First execution
            echo "$wrapper_script" > /tmp/wrapped_script.sql
            output1=$(PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -v ON_ERROR_STOP=0 -f /tmp/wrapped_script.sql 2>&1)
            
            # Check for errors that aren't relation doesn't exist (which is expected)
            if echo "$output1" | grep -E "ERROR:" | grep -v "relation .* does not exist"; then
              error_log="Error in ${file}: $(echo "$output1" | grep -E "ERROR:" | grep -v "relation .* does not exist" | head -1)"
              # Simplify and clean the error message
              error_log=$(echo "$error_log" | tr '\n' ' ' | sed 's/"/'"'"'/g')
              echo "error_log=${error_log}" >> $GITHUB_ENV
              exit_code=1
              
              # Clean up and continue to next file
              PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "DROP SCHEMA IF EXISTS $schema_name CASCADE;"
              continue
            fi
            
            # Second execution
            output2=$(PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -v ON_ERROR_STOP=0 -f /tmp/wrapped_script.sql 2>&1)
            
            # Check for errors in second run that weren't in first run
            if echo "$output2" | grep -E "ERROR:" | grep -v "relation .* already exists" | grep -v "relation .* does not exist"; then
              new_errors=$(comm -13 <(echo "$output1" | grep "ERROR:" | sort) <(echo "$output2" | grep "ERROR:" | sort))
              if [ -n "$new_errors" ]; then
                error_log="Idempotency error in ${file}: $new_errors"
                # Simplify and clean the error message
                error_log=$(echo "$error_log" | tr '\n' ' ' | sed 's/"/'"'"'/g')
                echo "error_log=${error_log}" >> $GITHUB_ENV
                exit_code=1
              fi
            fi
            
            # Clean up
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "DROP SCHEMA IF EXISTS $schema_name CASCADE;"
            
            echo "âœ… $file is idempotent"
          done

          if [ -z "$error_log" ]; then
            echo "error_log=No errors found" >> $GITHUB_ENV
          fi

          exit ${exit_code}
        continue-on-error: false

      - name: Notify Slack on Failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: custom
          fields: ""
          custom_payload: |
            {
              "text": "ðŸ”„ *Idempotency validation failed for pull request #${{ github.event.pull_request.number }}*",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Pull Request",
                    "value": "<https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}|#${{ github.event.pull_request.number }}>",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "@${{ github.event.pull_request.user.login }}",
                    "short": true
                  }
                ],
                "text": "*Error Details:*\n${{ env.error_log }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
